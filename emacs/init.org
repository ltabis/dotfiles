#+title: Emacs Config
#+PROPERTY: header-args :tangle init.el
#+STARTUP: overview
#+auto_tangle: t

My config, made using this blog post: https://systemcrafters.net/emacs-from-scratch/basics-of-emacs-configuration/
When you do not understand a variable, use "C-h v".
Checkout the described packages using `package-list-packages`.

*** TODO [#D] pretty.
*** TODO [#D] Dired.

* TABLE OF CONTENT :toc:
* Packages

Setup use-package package loader and MELPA repository.

#+begin_src elisp
  ;; Install melpa for packages.
  (require 'package)
  (add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/") t)
  (package-initialize)

  ;; Install 'use-package' if it does not exist on the system.
  ;; Use package is a nice package installation abstraction.
  ;; https://github.com/jwiegley/use-package#installing-use-package
  ;; https://ianyepan.github.io/posts/setting-up-use-package/
  (unless (package-installed-p 'use-package)
    (package-refresh-contents)
    (package-install 'use-package))
  (eval-and-compile
    (setq use-package-always-ensure t  	; avoid calling :ensure on every package installation, will install them if they do not exist on the system.
	  use-package-expand-minimally t))
#+end_src

* Emacs customization

Emacs default variables customization.

#+begin_src elisp
  (setq inhibit-startup-message t	; Don't show the splash screen.
	visible-bell t			; Blinks when reaching end or start of buffer.
	use-dialog-box nil)             ; Don't pop up UI dialogs when prompting
  (menu-bar-mode -1)			; Remove menu bar
  (tool-bar-mode -1)			; Remove tool bar
  (scroll-bar-mode -1)			; Remove scroll bar
  (show-paren-mode 1)			; Show matching parens.
  (hl-line-mode 1)			; Highlight the selected line.
  (blink-cursor-mode -1)		; Prevent the cursor from blinking.
  (global-display-line-numbers-mode 1)	; Shoe line numbers in every buffer.
  (recentf-mode 1)			; Remember recent edited files. TODO: add `recentf-open-files` shortcut.
  (save-place-mode 1)			; Point goes to the last place where it was when you previously visited the same file.
  (global-auto-revert-mode 1)		; Revert buffers when the underlying file has changed.

  ;; Move customization variables to a separate file and load it.
  (setq custom-file (locate-user-emacs-file "custom-vars.el"))
  (load custom-file 'noerror 'nomessage)
#+end_src

* Theme

#+begin_src elisp
  (use-package zenburn-theme
    :config (load-theme 'zenburn t))

  ;; TODO: inspire from https://github.com/rougier/elegant-emacs/blob/master/elegance.el
  (set-face-font 'default "Roboto Mono Light 14")
  (setq-default line-spacing 0)
#+end_src

* Backups

Set backup files into .emacs_saves.

#+begin_src elisp
  (setq backup-directory-alist '(("." . "~/.emacs.saves")))
#+end_src

* Multi-cursors

Pop multiple cursors on a selection.

TODO: this mode has a lot of great commands, add those to the config.

#+begin_src elisp
  (use-package multiple-cursors
    :bind
    ("C-c e l" . mc/edit-lines)
    ("C->" . mc/mark-next-like-this)
    ("C-<" . 'mc/mark-next-like-this)
    ("C-c C-<" . 'mc/mark-all-like-this))
#+end_src

* Deadgrep

[[https://github.com/BurntSushi/ripgrep][Ripgrep]] is required.

#+begin_src elisp
  (use-package deadgrep :bind ("<f5>" . deadgrep))
#+end_src

* Beacon

Highlight cursor when jumping around.

#+begin_src elisp
  (use-package beacon
    :config (beacon-mode 1))
#+end_src

* Rainbow delimiters

Matching parens have colors.

#+begin_src elisp
  (use-package rainbow-delimiters :hook (prog-mode-hook . rainbow-delimiters-mode))
#+end_src

* Highligh TODO

#+begin_src elisp
  (use-package hl-todo
    :init
    (global-hl-todo-mode)
    :bind
    ("C-c h p" . hl-todo-previous)
    ("C-c h n" . hl-todo-next)
    ("C-c h o" . hl-todo-occur)
    ("C-c h i" . hl-todo-insert)
    :config
    (setq hl-todo-keyword-faces
	  '(("TODO"   . "#FF0000")
	    ("FIXME"  . "#FF0000")
	    ("DEBUG"  . "#A020F0")
	    ("NOTE"   . "#A020F0")
	    ("GOTCHA" . "#FF4500")
	    ("STUB"   . "#1E90FF"))))
#+end_src

* Org
** Setup

#+begin_src elisp
  (use-package org
    :config
    (setq
     org-directory "~/org/"
     org-log-into-drawer t
     org-agenda-files '("~/org/")
     org-log-done 'time)

    ;; Register new templates here.
    (setq org-capture-templates
	  '(
	    ("t" "simple todo" entry (file+headline "~/org/todo.org" "Tasks")
	     "* TODO %?\n  %i\n")

	    ("a" "tracked todo" entry (file+headline "~/org/todo.org" "Tasks")
	     "* TODO %?\n  %i\n  %a")

	    ("i" "simple idea" entry (file+headline "~/org/idea.org" "Ideas")
	     "* IDEA %?\n  %i\n")

	    ("j" "journal entry" entry (file+datetree "~/org/journal.org")
	     "* %?\nEntered on %U\n  %i\n  %a")))
    :bind
    ("C-c a" . org-agenda)
    ("C-c c" . org-capture))
#+end_src

** Auto tangle

Transform org source blocks into the associated source file.
Used to transform org config into elisp files.

#+begin_src elisp
  ;; Tangle org files on save.
  (use-package org-auto-tangle
    :defer t
    :hook (org-mode . org-auto-tangle-mode))
#+end_src

** Fancy priorities

#+begin_src elisp
  (use-package org-fancy-priorities
    :hook (org-mode . org-fancy-priorities-mode)
    :config (setq org-fancy-priorities-list '("ðŸ”´" "ðŸŸ¡" "ðŸŸ¢" "âšª")))
#+end_src

** Journal

An addon for journaling using org mode

#+begin_src elisp
  (use-package org-journal
    :config
    (setq
     org-journal-dir "~/org/journal/"
     org-journal-date-prefix "#+TITLE:"     ; Org-mode style header.
     org-journal-time-prefix "* "           ; Entries for the day are now top-level headers.
     org-journal-file-format "%Y%m%d.org")) ; Make all journal entries org-mode.
#+end_src

** Noter

#+begin_src elisp
  (use-package pdf-tools)
  (use-package org-noter)
#+end_src

** Roam

Backlinks following the [[https://www.orgroam.com/manual.html#A-Brief-Introduction-to-the-Zettelkasten-Method][Zettelkasten Method]].
Checkout the [[https://www.orgroam.com/manual.html#Setting-up-Org_002droam][org mode manual]] for more information.

#+begin_src elisp
  (use-package org-roam
    :config
    (setq org-roam-directory (file-truename "~/org/knowledge")) ; file-truname is used to resolve symlimks, just in case.
    (org-roam-db-autosync-mode))
#+end_src

*** UI

#+begin_src elisp
  (use-package org-roam-ui
    :config
    (setq org-roam-ui-sync-theme t
	  org-roam-ui-follow t
	  org-roam-ui-update-on-save t))
#+end_src
