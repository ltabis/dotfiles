#+title: Doom Emacs Config
#+PROPERTY: header-args :tangle config.el
#+STARTUP: overview

* TABLE OF CONTENTS :toc:
- [[#doom-comments][Doom Comments]]
- [[#personal][Personal]]
- [[#theme][Theme]]
- [[#line-numbers][Line numbers]]
- [[#beacon][Beacon]]
- [[#plantuml][PlantUML]]
- [[#org-mode][Org Mode]]
- [[#org-pomodoro][Org pomodoro]]
- [[#org-journal][Org journal]]
- [[#org-roam][Org Roam]]
- [[#org-roam-ui][Org roam UI]]

* Doom Comments
Place your private configuration here! Remember, you do not need to run 'doom
sync' after modifying this file!

 Whenever you reconfigure a package, make sure to wrap your config in an
 `after!' block, otherwise Doom's defaults may override your settings. E.g.

   (after! PACKAGE
     (setq x y))

 The exceptions to this rule:

   - Setting file/directory variables (like `org-directory')
   - Setting variables which explicitly tell you to set them before their
     package is loaded (see 'C-h v VARIABLE' to look up their documentation).
   - Setting doom variables (which start with 'doom-' or '+').

 Here are some additional functions/macros that will help you configure Doom.

 - `load!' for loading external *.el files relative to this one
 - `use-package!' for configuring packages
 - `after!' for running code after a package has loaded
 - `add-load-path!' for adding directories to the `load-path', relative to
   this file. Emacs searches the `load-path' when you load packages with
   `require' or `use-package'.
 - `map!' for binding new keys

 To get information about any of these functions/macros, move the cursor over
 the highlighted symbol at press 'K' (non-evil users must press 'C-c c k').
 This will open documentation for it, including demos of how they are used.
 Alternatively, use `C-h o' to look up a symbol (functions, variables, faces,
 etc).

 You can also try 'Gd' (or 'C-c c d') to jump to their definition and see how
 they are implemented.

 #+begin_src elisp
;;; $DOOMDIR/config.el -*- lexical-binding: t; -*-
 #+end_src

* Personal
Some functionality uses this to identify you, e.g. GPG configuration, email
clients, file templates and snippets. It is optional.

#+begin_src elisp
(setq user-full-name "John Doe"
      user-mail-address "john@doe.com")
#+end_src

* Theme
Doom exposes five (optional) variables for controlling fonts in Doom:
- `doom-font' -- the primary font to use
- `doom-variable-pitch-font' -- a non-monospace font (where applicable)
- `doom-big-font' -- used for `doom-big-font-mode'; use this for
  presentations or streaming.
- `doom-unicode-font' -- for unicode glyphs
- `doom-serif-font' -- for the `fixed-pitch-serif' face
See 'C-h v doom-font' for documentation and more examples of what they
accept. For example:
setq doom-font (font-spec :family "Fira Code" :size 12 :weight 'semi-light)
     doom-variable-pitch-font (font-spec :family "Fira Sans" :size 13))
If you or Emacs can't find your font, use 'M-x describe-font' to look them
up, `M-x eval-region' to execute elisp code, and 'M-x doom/reload-font' to
refresh your font settings. If Emacs still can't find your font, it likely
wasn't installed correctly. Font issues are rarely Doom issues!

There are two ways to load a theme. Both assume the theme is installed and
available. You can either set `doom-theme' or manually load a theme with the
`load-theme' function. This is the default:

#+begin_src elisp
(setq doom-theme 'doom-one)
#+end_src

* Line numbers
This determines the style of line numbers in effect. If set to `nil', line
numbers are disabled. For relative line numbers, set this to `relative'.

#+begin_src elisp
(setq display-line-numbers-type t)
#+end_src

* Beacon
A minor mode that help locating the cursor after big movement.

#+begin_src elisp
(beacon-mode 1)
#+end_src
* PlantUML

Generate UMLs from a few lines of code.

#+begin_src elisp
(setq
 plantuml-default-exec-mode 'jar)  ; execute the binary instead of sending request to a server.
#+end_src

* Org Mode
#+begin_src elisp
(after! org
  ;; If you use `org' and don't want your org files in the default location below,
  ;; change `org-directory'.
  (setq
    org-directory "~/org/"
    org-log-into-drawer t
    org-agenda-files '("~/org/")
    org-log-done 'time)

  ;; Register new templates here.
  (setq org-capture-templates
      '(
        ("t" "simple todo" entry (file+headline "~/org/todo.org" "Tasks")
         "* TODO %?\n  %i\n")

        ("a" "tracked todo" entry (file+headline "~/org/todo.org" "Tasks")
         "* TODO %?\n  %i\n  %a")

        ("i" "simple idea" entry (file+headline "~/org/idea.org" "Ideas")
         "* IDEA %?\n  %i\n")

        ("j" "journal entry" entry (file+datetree "~/org/journal.org")
         "* %?\nEntered on %U\n  %i\n  %a"))))
#+end_src
* Org pomodoro

#+begin_src elisp

#+end_src

* Org journal

An addon for journaling using org mode

#+begin_src elisp
(setq
 org-journal-dir "~/org/journal/"
 org-journal-date-prefix "#+TITLE:"     ; Org-mode style header.
 org-journal-time-prefix "* "           ; Entries for the day are now top-level headers.
 org-journal-file-format "%Y%m%d.org")  ; Make all journal entries org-mode.
#+end_src

* Org Roam

Backlinks following the [[https://www.orgroam.com/manual.html#A-Brief-Introduction-to-the-Zettelkasten-Method][Zettelkasten Method]].
Checkout the [[https://www.orgroam.com/manual.html#Setting-up-Org_002droam][org mode manual]] for more information.

#+begin_src elisp
(setq org-roam-directory (file-truename "~/org/knowledge")) ; file-truname is used to resolve symlimks, just in case.
(org-roam-db-autosync-mode)
#+end_src
* Org roam UI

configuratiom for org roam UI in the browser.

#+begin_src elisp
(use-package! websocket
    :after org-roam)

(use-package! org-roam-ui
    :after org-roam ;; or :after org
;;         normally we'd recommend hooking orui after org-roam, but since org-roam does not have
;;         a hookable mode anymore, you're advised to pick something yourself
;;         if you don't care about startup time, use
;;  :hook (after-init . org-roam-ui-mode)
    :config
    (setq org-roam-ui-sync-theme t
          org-roam-ui-follow t
          org-roam-ui-update-on-save t
          org-roam-ui-open-on-start t))

#+end_src
